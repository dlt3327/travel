<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.it.mbg.mapper.MsLogMapper">
  <resultMap id="BaseResultMap" type="com.it.mbg.entity.MsLog">
    <id column="msg_id" jdbcType="VARCHAR" property="msgId" />
    <result column="exchange" jdbcType="VARCHAR" property="exchange" />
    <result column="routing_key" jdbcType="VARCHAR" property="routingKey" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="try_count" jdbcType="INTEGER" property="tryCount" />
    <result column="next_try_time" jdbcType="TIMESTAMP" property="nextTryTime" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
    <result column="delayTimes" jdbcType="BIGINT" property="delaytimes" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.it.mbg.entity.MsLog">
    <result column="msg" jdbcType="LONGVARCHAR" property="msg" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    msg_id, exchange, routing_key, status, try_count, next_try_time, create_time, update_time, 
    delayTimes
  </sql>
  <sql id="Blob_Column_List">
    msg
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.it.mbg.entity.MsLogExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from msg_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.it.mbg.entity.MsLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from msg_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.String" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from msg_log
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.String">
    delete from msg_log
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </delete>
  <delete id="deleteByExample" parameterType="com.it.mbg.entity.MsLogExample">
    delete from msg_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.it.mbg.entity.MsLog">
    insert into msg_log (msg_id, exchange, routing_key, 
      status, try_count, next_try_time, 
      create_time, update_time, delayTimes, 
      msg)
    values (#{msgId,jdbcType=VARCHAR}, #{exchange,jdbcType=VARCHAR}, #{routingKey,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{tryCount,jdbcType=INTEGER}, #{nextTryTime,jdbcType=TIMESTAMP}, 
      #{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, #{delaytimes,jdbcType=BIGINT}, 
      #{msg,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.it.mbg.entity.MsLog">
    insert into msg_log
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="msgId != null">
        msg_id,
      </if>
      <if test="exchange != null">
        exchange,
      </if>
      <if test="routingKey != null">
        routing_key,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="tryCount != null">
        try_count,
      </if>
      <if test="nextTryTime != null">
        next_try_time,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="delaytimes != null">
        delayTimes,
      </if>
      <if test="msg != null">
        msg,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="msgId != null">
        #{msgId,jdbcType=VARCHAR},
      </if>
      <if test="exchange != null">
        #{exchange,jdbcType=VARCHAR},
      </if>
      <if test="routingKey != null">
        #{routingKey,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="tryCount != null">
        #{tryCount,jdbcType=INTEGER},
      </if>
      <if test="nextTryTime != null">
        #{nextTryTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delaytimes != null">
        #{delaytimes,jdbcType=BIGINT},
      </if>
      <if test="msg != null">
        #{msg,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.it.mbg.entity.MsLogExample" resultType="java.lang.Long">
    select count(*) from msg_log
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update msg_log
    <set>
      <if test="record.msgId != null">
        msg_id = #{record.msgId,jdbcType=VARCHAR},
      </if>
      <if test="record.exchange != null">
        exchange = #{record.exchange,jdbcType=VARCHAR},
      </if>
      <if test="record.routingKey != null">
        routing_key = #{record.routingKey,jdbcType=VARCHAR},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.tryCount != null">
        try_count = #{record.tryCount,jdbcType=INTEGER},
      </if>
      <if test="record.nextTryTime != null">
        next_try_time = #{record.nextTryTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.delaytimes != null">
        delayTimes = #{record.delaytimes,jdbcType=BIGINT},
      </if>
      <if test="record.msg != null">
        msg = #{record.msg,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update msg_log
    set msg_id = #{record.msgId,jdbcType=VARCHAR},
      exchange = #{record.exchange,jdbcType=VARCHAR},
      routing_key = #{record.routingKey,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      try_count = #{record.tryCount,jdbcType=INTEGER},
      next_try_time = #{record.nextTryTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      delayTimes = #{record.delaytimes,jdbcType=BIGINT},
      msg = #{record.msg,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update msg_log
    set msg_id = #{record.msgId,jdbcType=VARCHAR},
      exchange = #{record.exchange,jdbcType=VARCHAR},
      routing_key = #{record.routingKey,jdbcType=VARCHAR},
      status = #{record.status,jdbcType=INTEGER},
      try_count = #{record.tryCount,jdbcType=INTEGER},
      next_try_time = #{record.nextTryTime,jdbcType=TIMESTAMP},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      delayTimes = #{record.delaytimes,jdbcType=BIGINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.it.mbg.entity.MsLog">
    update msg_log
    <set>
      <if test="exchange != null">
        exchange = #{exchange,jdbcType=VARCHAR},
      </if>
      <if test="routingKey != null">
        routing_key = #{routingKey,jdbcType=VARCHAR},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="tryCount != null">
        try_count = #{tryCount,jdbcType=INTEGER},
      </if>
      <if test="nextTryTime != null">
        next_try_time = #{nextTryTime,jdbcType=TIMESTAMP},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="delaytimes != null">
        delayTimes = #{delaytimes,jdbcType=BIGINT},
      </if>
      <if test="msg != null">
        msg = #{msg,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.it.mbg.entity.MsLog">
    update msg_log
    set exchange = #{exchange,jdbcType=VARCHAR},
      routing_key = #{routingKey,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      try_count = #{tryCount,jdbcType=INTEGER},
      next_try_time = #{nextTryTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      delayTimes = #{delaytimes,jdbcType=BIGINT},
      msg = #{msg,jdbcType=LONGVARCHAR}
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.it.mbg.entity.MsLog">
    update msg_log
    set exchange = #{exchange,jdbcType=VARCHAR},
      routing_key = #{routingKey,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      try_count = #{tryCount,jdbcType=INTEGER},
      next_try_time = #{nextTryTime,jdbcType=TIMESTAMP},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      delayTimes = #{delaytimes,jdbcType=BIGINT}
    where msg_id = #{msgId,jdbcType=VARCHAR}
  </update>
</mapper>