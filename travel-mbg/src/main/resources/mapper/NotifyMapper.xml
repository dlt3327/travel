<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.it.mbg.mapper.NotifyMapper">
  <resultMap id="BaseResultMap" type="com.it.mbg.entity.Notify">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="target_id" jdbcType="BIGINT" property="targetId" />
    <result column="target_type" jdbcType="VARCHAR" property="targetType" />
    <result column="action" jdbcType="VARCHAR" property="action" />
    <result column="sender_id" jdbcType="BIGINT" property="senderId" />
    <result column="sender_type" jdbcType="VARCHAR" property="senderType" />
    <result column="is_read" jdbcType="INTEGER" property="isRead" />
    <result column="user_id" jdbcType="BIGINT" property="userId" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.it.mbg.entity.Notify">
    <result column="content" jdbcType="LONGVARCHAR" property="content" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, type, target_id, target_type, action, sender_id, sender_type, is_read, user_id, 
    create_time
  </sql>
  <sql id="Blob_Column_List">
    content
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.it.mbg.entity.NotifyExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from notify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.it.mbg.entity.NotifyExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from notify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from notify
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from notify
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.it.mbg.entity.NotifyExample">
    delete from notify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.it.mbg.entity.Notify">
    insert into notify (id, type, target_id, 
      target_type, action, sender_id, 
      sender_type, is_read, user_id, 
      create_time, content)
    values (#{id,jdbcType=BIGINT}, #{type,jdbcType=VARCHAR}, #{targetId,jdbcType=BIGINT}, 
      #{targetType,jdbcType=VARCHAR}, #{action,jdbcType=VARCHAR}, #{senderId,jdbcType=BIGINT}, 
      #{senderType,jdbcType=VARCHAR}, #{isRead,jdbcType=INTEGER}, #{userId,jdbcType=BIGINT}, 
      #{createTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.it.mbg.entity.Notify">
    insert into notify
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="targetId != null">
        target_id,
      </if>
      <if test="targetType != null">
        target_type,
      </if>
      <if test="action != null">
        action,
      </if>
      <if test="senderId != null">
        sender_id,
      </if>
      <if test="senderType != null">
        sender_type,
      </if>
      <if test="isRead != null">
        is_read,
      </if>
      <if test="userId != null">
        user_id,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="content != null">
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=BIGINT},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="targetId != null">
        #{targetId,jdbcType=BIGINT},
      </if>
      <if test="targetType != null">
        #{targetType,jdbcType=VARCHAR},
      </if>
      <if test="action != null">
        #{action,jdbcType=VARCHAR},
      </if>
      <if test="senderId != null">
        #{senderId,jdbcType=BIGINT},
      </if>
      <if test="senderType != null">
        #{senderType,jdbcType=VARCHAR},
      </if>
      <if test="isRead != null">
        #{isRead,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        #{userId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.it.mbg.entity.NotifyExample" resultType="java.lang.Long">
    select count(*) from notify
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update notify
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.targetId != null">
        target_id = #{record.targetId,jdbcType=BIGINT},
      </if>
      <if test="record.targetType != null">
        target_type = #{record.targetType,jdbcType=VARCHAR},
      </if>
      <if test="record.action != null">
        action = #{record.action,jdbcType=VARCHAR},
      </if>
      <if test="record.senderId != null">
        sender_id = #{record.senderId,jdbcType=BIGINT},
      </if>
      <if test="record.senderType != null">
        sender_type = #{record.senderType,jdbcType=VARCHAR},
      </if>
      <if test="record.isRead != null">
        is_read = #{record.isRead,jdbcType=INTEGER},
      </if>
      <if test="record.userId != null">
        user_id = #{record.userId,jdbcType=BIGINT},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.content != null">
        content = #{record.content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update notify
    set id = #{record.id,jdbcType=BIGINT},
      type = #{record.type,jdbcType=VARCHAR},
      target_id = #{record.targetId,jdbcType=BIGINT},
      target_type = #{record.targetType,jdbcType=VARCHAR},
      action = #{record.action,jdbcType=VARCHAR},
      sender_id = #{record.senderId,jdbcType=BIGINT},
      sender_type = #{record.senderType,jdbcType=VARCHAR},
      is_read = #{record.isRead,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      content = #{record.content,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update notify
    set id = #{record.id,jdbcType=BIGINT},
      type = #{record.type,jdbcType=VARCHAR},
      target_id = #{record.targetId,jdbcType=BIGINT},
      target_type = #{record.targetType,jdbcType=VARCHAR},
      action = #{record.action,jdbcType=VARCHAR},
      sender_id = #{record.senderId,jdbcType=BIGINT},
      sender_type = #{record.senderType,jdbcType=VARCHAR},
      is_read = #{record.isRead,jdbcType=INTEGER},
      user_id = #{record.userId,jdbcType=BIGINT},
      create_time = #{record.createTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.it.mbg.entity.Notify">
    update notify
    <set>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="targetId != null">
        target_id = #{targetId,jdbcType=BIGINT},
      </if>
      <if test="targetType != null">
        target_type = #{targetType,jdbcType=VARCHAR},
      </if>
      <if test="action != null">
        action = #{action,jdbcType=VARCHAR},
      </if>
      <if test="senderId != null">
        sender_id = #{senderId,jdbcType=BIGINT},
      </if>
      <if test="senderType != null">
        sender_type = #{senderType,jdbcType=VARCHAR},
      </if>
      <if test="isRead != null">
        is_read = #{isRead,jdbcType=INTEGER},
      </if>
      <if test="userId != null">
        user_id = #{userId,jdbcType=BIGINT},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null">
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.it.mbg.entity.Notify">
    update notify
    set type = #{type,jdbcType=VARCHAR},
      target_id = #{targetId,jdbcType=BIGINT},
      target_type = #{targetType,jdbcType=VARCHAR},
      action = #{action,jdbcType=VARCHAR},
      sender_id = #{senderId,jdbcType=BIGINT},
      sender_type = #{senderType,jdbcType=VARCHAR},
      is_read = #{isRead,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.it.mbg.entity.Notify">
    update notify
    set type = #{type,jdbcType=VARCHAR},
      target_id = #{targetId,jdbcType=BIGINT},
      target_type = #{targetType,jdbcType=VARCHAR},
      action = #{action,jdbcType=VARCHAR},
      sender_id = #{senderId,jdbcType=BIGINT},
      sender_type = #{senderType,jdbcType=VARCHAR},
      is_read = #{isRead,jdbcType=INTEGER},
      user_id = #{userId,jdbcType=BIGINT},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
</mapper>